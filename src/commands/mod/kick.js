const { SlashCommandBuilder, EmbedBuilder, PermissionsBitField, ButtonBuilder, ButtonStyle, ActionRowBuilder, MessageFlags } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
  .setName('kick')
  .setDescription('[MODERA√á√ÉO] Expulse um usu√°rio do servidor.')
  .addUserOption(option => option.setName('usu√°rio').setDescription('Mencione um usu√°rio.').setRequired(true))
  .addStringOption(option => option.setName('motivo').setDescription('Diga um motivo. Caso n√£o escreva nada, o motivo ser√° "Indefinido".')),

  execute: async (interaction) => {
    if (!interaction.guild) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | S√≥ √© poss√≠vel executar este comando em servidores!**`, flags: MessageFlags.Ephemeral });
    }

    let user = interaction.options.getUser('usu√°rio');
    let motivo = interaction.options.getString('motivo') || 'Indefinido';

    let member = interaction.guild.members.cache.get(user.id);
    let authorMember = interaction.guild.members.cache.get(interaction.user.id);
    let botMember = interaction.guild.members.cache.get(interaction.client.user.id);

    if (!member) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | Este usu√°rio n√£o est√° no servidor!**`, flags: MessageFlags.Ephemeral });
    }

    if (!authorMember.permissions.has(PermissionsBitField.Flags.KickMembers)) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | Voc√™ precisa da permiss√£o de expulsar membros para executar este comando.**`, flags: MessageFlags.Ephemeral });
    }

    if (!botMember.permissions.has(PermissionsBitField.Flags.KickMembers)) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | Eu n√£o tenho permiss√£o para expulsar membros!**`, flags: MessageFlags.Ephemeral });
    }

    if (member.id === interaction.user.id) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | Voc√™ n√£o pode se expulsar!**`, flags: MessageFlags.Ephemeral });
    }

    if (member.id === interaction.client.user.id) {
      return interaction.reply({ content: `**üôÑ | Eu n√£o vou me punir.**`, flags: MessageFlags.Ephemeral });
    }

    if (authorMember.roles.highest.position <= member.roles.highest.position && interaction.user.id !== interaction.guild.ownerId) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | Voc√™ n√£o pode expulsar esse usu√°rio porque a posi√ß√£o do cargo mais alto dele √© maior ou igual ao do seu cargo mais alto.**`, flags: MessageFlags.Ephemeral });
    }

    if (botMember.roles.highest.position <= member.roles.highest.position) {
      return interaction.reply({ content: `**<:x_error:1319711413459095592> | Eu n√£o posso expulsar esse usu√°rio porque a posi√ß√£o do cargo mais alto dele √© maior ou igual ao do meu cargo mais alto!**`, flags: MessageFlags.Ephemeral });
    }

    let confirmButton = new ButtonBuilder()
    .setLabel('Confirmar')
    .setStyle(ButtonStyle.Success)
    .setEmoji('<a:success:1320748734593765428>')
    .setCustomId('kickconfirm');

    let cancelButton = new ButtonBuilder()
    .setLabel('Cancelar')
    .setStyle(ButtonStyle.Danger)
    .setEmoji('<:x_error:1319711413459095592>')
    .setCustomId('kickcancel');

    let row = new ActionRowBuilder()
    .addComponents(confirmButton, cancelButton);

    const msg = await interaction.reply({ content: `**ü§î | Voc√™ quer realmente expulsar ${member.user.username} do servidor?**`, components: [row] });

    const coletor = msg.createMessageComponentCollector({ time: 300000 });

    coletor.on('collect', async (i) => {
      if (i.customId === 'kickconfirm') {
        if (i.user.id !== interaction.user.id) {
          return i.reply({ content: `**<:x_error:1319711413459095592> Somente ${interaction.user.username} pode completar essa a√ß√£o.**`, flags: MessageFlags.Ephemeral });
        }

      let embedSuccess = new EmbedBuilder()
      .setTitle(`**<a:success:1320748734593765428> | Usu√°rio expulso com sucesso!**`)
      .setDescription(`**<:banHammer:1329882827449434194> Usu√°rio expulsado:** <@${member.id}>\n**<:adm:1329883216177533078> Respons√°vel:** <@${interaction.user.id}>\n**üìù Motivo:** ${motivo}.`)
      .setThumbnail(member.displayAvatarURL({ dynamic: true }))
      .setFooter({ text: `Usu√°rio expulso.` })
      .setColor(0x00ff00)
      .setTimestamp();

      await i.deferReply();

      member.kick(motivo).then(async () => {
        await i.followUp({ embeds: [embedSuccess] });
        }).catch(async (err) => {
        await i.followUp({ content: `**<:x_error:1319711413459095592> | N√£o foi poss√≠vel expulsar o usu√°rio.**`, flags: MessageFlags.Ephemeral });
        })
      }

      if (i.customId === 'kickcancel') {
        if (i.user.id !== interaction.user.id) {
          return i.reply({ content: `**<:x_error:1319711413459095592> Somente ${interaction.user.username} pode completar essa a√ß√£o.**`, flags: MessageFlags.Ephemeral });
        }
      (async () => {
        await i.deferUpdate();

        await msg.edit({ content: `**<:x_error:1319711413459095592> | A√ß√£o cancelada.**`, components: [] });
        })();
      }
    });

    coletor.on('end', async (collected, reason) => {
      if (reason === 'time') {
        await msg.edit({ content: `**<:x_error:1319711413459095592> | A√ß√£o cancelada. O tempo expirou.**`, components: [] });
      }
    });
  }
}